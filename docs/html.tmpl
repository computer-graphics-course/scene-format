<!DOCTYPE html>

<html>
  <head>
    <title>Scene Format - v1</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Ubuntu:400,700,400italic"/>
    <link rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js"></script>
    <style>
      html {
        scroll-behavior: smooth;
      }

      body {
        width: 60em;
        margin: 1em auto;
        color: #222;
        font-family: "Ubuntu", sans-serif;
        padding-bottom: 4em;
      }

      h1 {
        font-weight: normal;
        border-bottom: 1px solid #aaa;
        padding-bottom: 0.5ex;
      }

      h2 {
        border-bottom: 1px solid #aaa;
        padding-bottom: 0.5ex;
        margin: 1.5em 0;
      }

      h3 {
        font-weight: normal;
        border-bottom: 1px solid #aaa;
        padding-bottom: 0.5ex;
      }

      a {
        text-decoration: none;
        color: #567e25;
      }

      table {
        width: 100%;
        font-size: 80%;
        border-collapse: collapse;
        line-height: 1.5;
      }

      thead {
        font-weight: 700;
        background-color: #dcdcdc;
      }

      tbody tr:nth-child(even) {
        background-color: #fbfbfb;
      }

      td {
        border: 1px solid #ccc;
        padding: 0.5ex 2ex;
      }

      td p {
        text-indent: 1em;
        margin: 0;
      }

      td p:nth-child(1) {
        text-indent: 0; /* No indent on first p in td */
      }

      /* Table of fields */
      .field-table .field_name { /* Field */
        width: 5em;
      }
      .field-table .field_type { /* Type */
        width: 12em;
      }
      .field-table .required_to_implement { /* Required to implement */
        width: 12em;
      }
      .field-table .field_description { /* Description */
        width: auto;
      }

      /* Table of extensions */
      .extension-table td:nth-child(1) { /* Extension */
        width: 10em;
      }
      .extension-table td:nth-child(2) { /* Type */
        width: 10em;
      }
      .extension-table td:nth-child(3) { /* Base */
        width: 10em;
      }
      .extension-table td:nth-child(4) { /* Number */
        width: 5em;
      }
      .extension-table td:nth-child(5) { /* Description */
        width: auto;
      }

      /* Table of enum values. */
      .enum-table td:nth-child(1) { /* Name */
        width: 10em;
      }
      .enum-table td:nth-child(2) { /* Number */
        width: 10em;
      }
      .enum-table td:nth-child(3) { /* Description */
        width: auto;
      }

      /* Table of scalar value types. */
      .scalar-value-types-table tr {
        height: 3em;
      }

      /* Table of contents. */
      #toc-container ul {
        list-style-type: none;
        padding-left: 1em;
        line-height: 180%;
        margin: 0;
      }
      #toc > li > a {
        font-weight: bold;
      }

      /* File heading div */
      .file-heading {
        width: 100%;
        display: table;
        border-bottom: 1px solid #aaa;
        margin: 4em 0 1.5em 0;
      }
      .struct-heading {
        width: 100%;
        display: table;
        margin-top: 0.75rem;
        border-bottom: 1px solid #aaa;
      }
      .file-heading h2, .struct-heading h3 {
        border: none;
        display: table-cell;
      }
      .file-heading a {
        text-align: right;
        display: table-cell;
      }
      .struct-heading a {
        text-align: right;
        display: table-cell;
        opacity: 0;
        transition: opacity 0.2s ease-in;
      }
      .struct-heading:hover a {
        opacity: 1;
      }

      /* The 'M', 'E' and 'X' badges in the ToC */
      .badge {
        width: 1.6em;
        height: 1.6em;
        display: inline-block;

        line-height: 1.6em;
        text-align: center;
        font-weight: bold;
        font-size: 60%;

        color: #89ba48;
        background-color: #dff0c8;

        margin: 0.5ex 1em 0.5ex -1em;
        border: 1px solid #fbfbfb;
        border-radius: 1ex;
      }
    </style>
  </head>

  <body>

    <h1 id="title">Scene Format - v1</h1>

    <h2>Table of Contents</h2>

    <div id="toc-container">
      <ul id="toc">
        <li><a href="#into">Intro</a></li>
        {{range .Files}}
          {{$file_name := .Name}}
          <li>
            <a href="#{{.Name}}">{{.Name}}</a>
            <ul>
              {{range .Messages}}
                <li>
                  <a href="#{{.FullName}}"><span class="badge">M</span>{{.LongName}}</a>
                </li>
              {{end}}
              {{range .Enums}}
                <li>
                  <a href="#{{.FullName}}"><span class="badge">E</span>{{.LongName}}</a>
                </li>
              {{end}}
              {{range .Extensions}}
                <li>
                  <a href="#{{$file_name}}-extensions"><span class="badge">X</span>File-level Extensions</a>
                </li>
              {{end}}
              {{range .Services}}
                <li>
                  <a href="#{{.FullName}}"><span class="badge">S</span>{{.Name}}</a>
                </li>
              {{end}}
            </ul>
          </li>
        {{end}}
        <li><a href="#scalar-value-types">Scalar Value Types</a></li>
        <li><a href="#json-example">JSON Example</a></li>
      </ul>
    </div>

    <div class="file-heading">
      <h2 id="intro">Intro</h2>
      <a href="#title">Top</a>
    </div>
    <div>
      This scene format is intended to be used to define scenes for rendering as a part of a <a href="https://github.com/computer-graphics-course/assignments">computer graphics course</a>.<br />
      We use <a href="https://developers.google.com/protocol-buffers">protobuf</a> to define files schema (<a href="https://github.com/computer-graphics-course/scene-format/blob/master/proto/scene.proto">see it on GitHub</a>).  
      Protobuf schema is a single source of truth and it is used to generate io libraries and this document.<br />
      Data is stored as json in files with <i>.cowscene</i> extension (binary mode is also supported).

      <h3 id="into-file-structure">Structure<h3>
      The top-level structure of this file is <a href="#scene_format.Scene">Scene</a>. All scene objects are listed there.<br />
      <b>Note that fields marked with <i>"Required to implement? No"</i> mean fields and features which are not required to be implemented as a part of the course. These fields are added for fun and experimentation purposes only.</b>

      <h3>Usage & example</h3>
      Please <a href="#json-example">see the example</a> of the demo scene defined in this format (<a href="https://github.com/computer-graphics-course/scene-format/blob/master/file_samples/binary.cowscene">example for binary is available in our github repo</a>). To read or write such files we provide libraries for a number of languages. These libraries support both json and binary as inputs.<br />
      <b>It is strongly advised to use libraries we provide instead of implementing your own parser. That is because our libraries implement additional pre/postprocessing steps when reading/writing the file.</b>

      <h3>C# Library</h3>
      <b>Step 1.</b> Create a GitHub token with the <i>read:packages</i> scope <a href="https://github.com/settings/tokens">here</a>.<br />
      <b>Step 2.</b> Add a nuget source:
      <pre>
      <code>
dotnet nuget add source "https://github.com/computer-graphics-course/index.json" --name "SceneFormat GitHub" --username "&lt;your github username&gt;" --password "&lt;token from step 1&gt;"
      </code>
      </pre>
      <b>Step 3.</b> Install <i>SceneFormat</i> dependency. Check <a href="https://github.com/computer-graphics-course/scene-format/packages/752161">this page</a> for the latest version available.<br />
      <b>Step 4.</b> Use code from <a href="https://github.com/computer-graphics-course/scene-format/blob/master/csharp/SceneFormat/Example/Program.cs">this snippet</a> to read or write scene format files.<br />

      <h3>JavaScript/TypeScript Library</h3>
      <b>Step 1.</b> Create a GitHub token with the <i>read:packages</i> scope <a href="https://github.com/settings/tokens">here</a>.<br />
      <b>Step 2.</b> Login to npm registry (use your github username as username and token from step 1 as password):
      <pre>
      <code>
npm login --scope=@computer-graphics-course --registry=https://npm.pkg.github.com
      </code>
      </pre>
      <b>Step 3.</b> Install scene-format dependency:
      <pre>
      <code>
npm install --save @computer-graphics-course/scene-format
      </code>
      </pre>
      Remember that you can always check for latest version on <a href="https://github.com/computer-graphics-course/scene-format/packages/754546">the package page</a>.<br />
      <b>Step 4.</b> Use code from <a href="https://github.com/computer-graphics-course/scene-format/blob/master/ts/example/main.ts">this snippet</a> to read or write scene format files.<br />

      <h3>Java Library</h3>
      <b>Step 1.</b> Create a GitHub token with the <i>read:packages</i> scope <a href="https://github.com/settings/tokens">here</a>.<br />
      <b>Step 2.</b> Add following lines to your <i>~/.gradle/gradle.properties</i>:
      <pre>
      <code>
gprComputerGraphicsUser=&lt;your github username&gt;
gprComputerGraphicsPassword=&lt;token from step 1&gt;
      </code>
      </pre>
      <b>Step 3.</b> Add repository to your <i>build.gradle</i> (see complete example <a href="https://github.com/computer-graphics-course/scene-format/blob/master/java/example/build.gradle">here</a>):
      <pre>
      <code>
maven {
  url "https://maven.pkg.github.com/computer-graphics-course/scene-format"
  credentials {
    username "$gprComputerGraphicsUser"
    password "$gprComputerGraphicsPassword"
  }
}
      </code>
      </pre>
      <b>Step 4.</b> Use code from <a href="https://github.com/computer-graphics-course/scene-format/blob/master/java/example/src/main/java/Main.java">this snippet</a> to read or write scene format files.<br />

      <h3>C++ Library (instructions for Visual Studio on Windows)</h3>
      <i>Please let us know if you have ideas for an easier way to distribute library.</i><br />
      <b>Step 1.</b>Install vcpkg:
      <pre>
      <code>
git clone https://github.com/microsoft/vcpkg
cd vckpg && ./bootstrap-vcpkg.bat
$env:Path += ";$(pwd)"
      </code>
      </pre>

      <b>Step 2.</b>Install protobuf libraries with vcpkg (do this in your project folder, note that this can take some time (around 10 minutes):
      <pre>
      <code>
vcpkg install protobuf protobuf:x64-windows
vcpkg integrate install
      </code>
      </pre>

      <b>Step 3.</b>Download latest library build from <a href="https://turbocow.nikitavbv.com/sceneformat/releases/cpp_latest.zip">here</a>. Place those somewhere in your project and include sceneio.h<br />
      <b>Step 4.</b> Use code from <a href="https://github.com/computer-graphics-course/scene-format/blob/master/cpp/example/Example/Example.cpp">this snippet</a> to read or write scene format files.<br />

      <h3>Rust Library</h3>
      Add to your Cargo.toml:
      <pre>
      <code>
sceneformat = { git = "https://github.com/computer-graphics-course/scene-format" }
      </code>
      </pre>
      Use code from <a href="https://github.com/computer-graphics-course/scene-format/blob/master/rust/src/lib.rs">this snippet's test</a> to read or write scene format files.<br />

      <h3>Other languages</h3>
      Please let us know if we missed some language you use. You can also build library yourself using protoc, as <a href="https://developers.google.com/protocol-buffers">described in protobuf docs</a>.<br />

      <h3>Problems? Contributions?</h3>
      If you have any suggestions or would like to submit a patch, feel free to create a pull request against the <a href="https://github.com/computer-graphics-course/scene-format">scene format repo</a> or
      create an issue.<br />
      Also, feel free to contact anyone from the scene format team if you have any questions or issues:
      <a href="https://t.me/nikitavbv">@nikitavbv</a>, <a href="https://t.me/Brookokoko">@Brookokoko</a>, <a href="https://t.me/metamodern">@metamodern</a>, <a href="https://t.me/TheBestTvarynka">@TheBestTvarynka</a>, <a href="https://t.me/grizik">@grizik</a>.
    </div>

    {{range .Files}}
      {{$file_name := .Name}}
      <div class="file-heading">
        <h2 id="{{.Name}}">{{.Name}}</h2><a href="#title">Top</a>
      </div>
      {{p .Description}}

      {{range .Messages}}
        <div class="struct-heading">
          <h3 id="{{.FullName}}">{{.LongName}}{{if (contains "@optional" .Description)}}<strong> - not required to implement</strong>{{end}}</h3>
          <a href="#title">Top</a>
        </div>
        {{p (trim (replace "\n" "<br/>" (replace "@optional" "" .Description)))}}

        {{if .HasFields}}
          <table class="field-table">
            <thead>
              <tr><td colspan="2">Field</td><td>Type</td><td>Required to implement?</td><td>Description</td></tr>
            </thead>
            <tbody>
              {{range .Fields}}
                <tr>
                  {{ if contains "@oneof " .Description }}
                    <div class="field_name">
                        <td colspan="1" rowspan="{{ index (split " " (replace "\n" " " .Description)) "_1" }}">{{ index (split " " (replace "\n" " " .Description)) "_2" }} (one&nbsp;of)</td>
                        <td colspan="1">{{.Name}}</td>
                    </div>
                  {{ else }}
                    {{ if contains "@oneof_item" .Description }}
                        <td class="field_name" colspan="1">{{.Name}}</td>
                    {{ else }}
                        <td class="field_name" colspan="2">{{ .Name }}</td>
                    {{ end }}
                  {{ end }}
                  <td class="field_type"><a href="#{{.FullType}}">{{ .LongType }}</a>{{if eq .Label "repeated" }}, repeated</strong>{{end}}</td>
                  <td class="required_to_implement">{{if not (contains "@optional" .Description) }}yes{{else}}<strong>no</strong>{{end}}</td>
                  <td class="field_description">
                      <p>
                        {{ if contains "@oneof " .Description}}
                            {{ replace "\n" "<br/>" (regexReplaceAll "^(?:\\S+(\\s|\\b)+\n?){3}" (replace "@optional" "" (replace "@optional " "" (replace "@optional\n" "" .Description))) "")}}
                        {{ else }}                            
                            {{trim (replace "\n" "<br/>" (replace "@oneof_item" "" (replace "@optional" "" (replace "@optional " "" (replace "@optional \n" "" .Description)))))}}
                        {{ end }}
                      </p>
                </td>
                </tr>
              {{end}}
            </tbody>
          </table>

          {{$message := .}}
          {{- range .FieldOptions}}
            {{$option := .}}
            {{if eq . "validator.field" "validate.rules" }}
            <h4>Validated Fields</h4>
            <table>
              <thead>
                <tr>
                  <td>Field</td>
                  <td>Validations</td>
                </tr>
              </thead>
              <tbody>
              {{range $message.FieldsWithOption .}}
                <tr>
                  <td>{{.Name}}</td>
                  <td>
                    <ul>
                    {{range (.Option $option).Rules}}
                      <li>{{.Name}}: {{.Value}}</li>
                    {{end}}
                    </ul>
                  </td>
                </tr>
              {{end}}
              </tbody>
            </table>
            {{else}}
            <h4>Fields with {{.}} option</h4>
            <table>
              <thead>
                <tr>
                  <td>Name</td>
                  <td>Option</td>
                </tr>
              </thead>
              <tbody>
              {{range $message.FieldsWithOption .}}
                <tr>
                  <td>{{.Name}}</td>
                  <td><p>{{ printf "%+v" (.Option $option)}}</p></td>
                </tr>
              {{end}}
              </tbody>
            </table>
            {{end}}
          {{end -}}
        {{end}}

        {{if .HasExtensions}}
          <br>
          <table class="extension-table">
            <thead>
              <tr><td>Extension</td><td>Type</td><td>Base</td><td>Number</td><td>Description</td></tr>
            </thead>
            <tbody>
              {{range .Extensions}}
                <tr>
                  <td>{{.Name}}</td>
                  <td><a href="#{{.FullType}}">{{.LongType}}</a></td>
                  <td><a href="#{{.ContainingFullType}}">{{.ContainingLongType}}</a></td>
                  <td>{{.Number}}</td>
                  <td><p>{{.Description}}{{if .DefaultValue}} Default: {{.DefaultValue}}{{end}}</p></td>
                </tr>
              {{end}}
            </tbody>
          </table>
        {{end}}
      {{end}}

      {{range .Enums}}
        <h3 id="{{.FullName}}">{{.LongName}}</h3>
        {{p .Description}}
        <table class="enum-table">
          <thead>
            <tr><td>Name</td><td>Number</td><td>Description</td></tr>
          </thead>
          <tbody>
            {{range .Values}}
              <tr>
                <td>{{.Name}}</td>
                <td>{{.Number}}</td>
                <td><p>{{.Description}}</p></td>
              </tr>
            {{end}}
          </tbody>
        </table>
      {{end}}

      {{if .HasExtensions}}
        <h3 id="{{$file_name}}-extensions">File-level Extensions</h3>
        <table class="extension-table">
          <thead>
            <tr><td>Extension</td><td>Type</td><td>Base</td><td>Number</td><td>Description</td></tr>
          </thead>
          <tbody>
            {{range .Extensions}}
              <tr>
                <td>{{.Name}}</td>
                <td><a href="#{{.FullType}}">{{.LongType}}</a></td>
                <td><a href="#{{.ContainingFullType}}">{{.ContainingLongType}}</a></td>
                <td>{{.Number}}</td>
                <td><p>{{.Description}}{{if .DefaultValue}} Default: {{.DefaultValue}}{{end}}</p></td>
              </tr>
            {{end}}
          </tbody>
        </table>
      {{end}}

      {{range .Services}}
        <h3 id="{{.FullName}}">{{.Name}}</h3>
        {{p .Description}}
        <table class="enum-table">
          <thead>
            <tr><td>Method Name</td><td>Request Type</td><td>Response Type</td><td>Description</td></tr>
          </thead>
          <tbody>
            {{range .Methods}}
              <tr>
                <td>{{.Name}}</td>
                <td><a href="#{{.RequestFullType}}">{{.RequestLongType}}</a>{{if .RequestStreaming}} stream{{end}}</td>
                <td><a href="#{{.ResponseFullType}}">{{.ResponseLongType}}</a>{{if .ResponseStreaming}} stream{{end}}</td>
                <td><p>{{.Description}}</p></td>
              </tr>
            {{end}}
          </tbody>
        </table>

        {{$service := .}}
        {{- range .MethodOptions}}
          {{$option := .}}
          {{if eq . "google.api.http"}}
          <h4>Methods with HTTP bindings</h4>
          <table>
            <thead>
              <tr>
                <td>Method Name</td>
                <td>Method</td>
                <td>Pattern</td>
                <td>Body</td>
              </tr>
            </thead>
            <tbody>
            {{range $service.MethodsWithOption .}}
              {{$name := .Name}}
              {{range (.Option $option).Rules}}
              <tr>
                <td>{{$name}}</td>
                <td>{{.Method}}</td>
                <td>{{.Pattern}}</td>
                <td>{{.Body}}</td>
              </tr>
              {{end}}
            {{end}}
            </tbody>
          </table>
          {{else}}
          <h4>Methods with {{.}} option</h4>
          <table>
            <thead>
              <tr>
                <td>Method Name</td>
                <td>Option</td>
              </tr>
            </thead>
            <tbody>
            {{range $service.MethodsWithOption .}}
              <tr>
                <td>{{.Name}}</td>
                <td><p>{{ printf "%+v" (.Option $option)}}</p></td>
              </tr>
            {{end}}
            </tbody>
          </table>
          {{end}}
        {{end -}}
      {{end}}
    {{end}}

    <div class="file-heading">
      <h2 id="scalar-value-types">Intro</h2>
      <a href="#title">Top</a>
    </div>
    <table class="scalar-value-types-table">
      <thead>
        <tr><td>Scalar Type</td><td>C#</td><td>JavaScript</td><td>Java</td><td>C++</td></tr>
      </thead>
      <tbody>
        {{range .Scalars}}
          <tr id="{{.ProtoType}}">
            <td>{{.ProtoType}}</td>
            <td>{{.CSharp}}</td>
            <td>any</td>
            <td>{{.JavaType}}</td>
            <td>{{.CppType}}</td>
          </tr>
        {{end}}
      </tbody>
    </table>

    <div class="file-heading">
      <h2 id="json-example">JSON example</h2>
      <a href="#title">Top</a>
    </div>
    <pre>
        <code class="json" style="font-size: 1rem;">{
  "version": 1,
  "renderOptions": {
    "cameraId": 1,
    "width": 1920,
    "height": 1080
  },
  "sceneObjects": [
    {
      "id": 4,
      "transform": {
        "position": {
          "x": 0,
          "y": 0,
          "z": 0
        },
        "scale": {
          "x": 0.4,
          "y": 1,
          "z": 4
        }
      },
      "material": {
        "solid": {}
      },
      "meshedObject": {
        "reference": "cow2.obj"
      }
    }
  ],
  "lights": [
    {
      "id": 2,
      "transform": {
        "position": {
          "x": 3,
          "y": 0,
          "z": 3
        }
      },
      "color": {
        "r": 0.5,
        "g": 0,
        "b": 1
      },
      "intensity": 100,
      "point": {}
    },
    {
      "id": 3,
      "transform": {
        "position": {
          "x": 0,
          "y": 3,
          "z": 0
        }
      },
      "color": {
        "r": 0,
        "g": 1,
        "b": 0
      },
      "intensity": 30,
      "point": {}
    }
  ],
  "cameras": [
    {
      "id": 1,
      "transform": {
        "position": {
          "x": 1.25,
          "y": 0.1,
          "z": 0
        },
        "rotation": {
          "x": 10,
          "y": 90,
          "z": 0
        }
      },
      "perspective": {
        "fov": 60
      }
    }
  ]
}
        </code>
    </pre>
  </body>
  <script>hljs.highlightAll();</script>
</html>

